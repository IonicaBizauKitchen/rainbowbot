// Generated by CoffeeScript 1.4.0
(function() {
  var Canvas, Rainbow, color, fs, http, quantize;

  quantize = require("./quantize.js");

  http = require("http");

  fs = require("fs");

  Canvas = require("canvas");

  color = require("onecolor");

  Rainbow = (function() {

    function Rainbow() {}

    Rainbow.paletteSize = 5;

    Rainbow.get = function(url, callback) {
      var Image, file, filename, img, req, start;
      Image = Canvas.Image;
      img = new Image;
      start = new Date;
      img.onerror = function(err) {
        throw err;
      };
      img.onload = function() {
        var a, b, canvas, cmap, ctx, fmt, g, h, i, offset, out, pixelArray, pixelCount, pixels, r, raw_palette, rgb, w, _i, _len;
        w = img.width;
        h = img.height;
        canvas = new Canvas(w, h);
        ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0, w, w);
        pixels = ctx.getImageData(0, 0, w, h).data;
        pixelCount = w * h;
        pixelArray = [];
        i = 0;
        offset = void 0;
        r = void 0;
        g = void 0;
        b = void 0;
        a = void 0;
        while (i < pixelCount) {
          offset = i * 4;
          r = pixels[offset + 0];
          g = pixels[offset + 1];
          b = pixels[offset + 2];
          a = pixels[offset + 3];
          if (a >= 125) {
            if (!(r > 250 && g > 250 && b > 250)) {
              pixelArray.push([r, g, b]);
            }
          }
          i++;
        }
        cmap = quantize(pixelArray, Rainbow.paletteSize);
        raw_palette = cmap.palette();
        out = {};
        out.hex = [];
        out.rgba = [];
        for (_i = 0, _len = raw_palette.length; _i < _len; _i++) {
          rgb = raw_palette[_i];
          b = rgb.pop();
          g = rgb.pop();
          r = rgb.pop();
          fmt = "rgb(" + r + ", " + g + ", " + b + ")";
          out.hex.push(color(fmt).hex().toUpperCase());
          out.rgba.push(color(fmt).cssa());
        }
        return callback(out);
      };
      filename = "/tmp/" + (new Date).getTime() + "_" + url.split("/").pop();
      file = fs.createWriteStream(filename);
      return req = http.get(url, function(res) {
        return res.on("data", function(data) {
          return file.write(data);
        }).on("end", function() {
          file.end();
          return img.src = filename;
        });
      });
    };

    return Rainbow;

  })();

  module.exports = Rainbow;

}).call(this);
